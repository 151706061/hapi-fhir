---
- item:
    type: "add"
    title: "The version of a few dependencies have been bumped to the latest versions
    (dependent HAPI modules listed in brackets):
    <ul>
    <li>Hibernate ORM (JPA): 5.4.6 -&gt; 5.4.14</li>
    <li>Hibernate Search (JPA): 5.11.3 -&gt; 5.11.5</li>
    <li>Hibernate Validator (JPA): 5.4.2.Final -&gt; 6.1.3.Final</li>
    <li>Guava (JPA): 28.0 -&gt; 28.2</li>
    <li>Spring Boot (Boot): 2.2.0.RELEASE -&gt; 2.2.6.RELEASE</li>
    </ul>"
- item:
    issue: "1583"
    type: "fix"
    title: "**Breaking Change**:
    The HAPI FHIR Validation infrastructure has changed significantly under the hood. Existing users of the
    validator may need to change package declarations (as FhirInstanceValidator and several other related classes
    have been moved) and potentially add new modules to their Validation Support Chain. See
    [Migrating to HAPI FHIR 5.x](/hapi-fhir/docs/validation/instance_validator.html#migrating-to-hapi-fhir-5x)
    for details on how to account for this change in your code.
    "
- item:
     issue: "1769"
     type: "change"
     title: "**Breaking Change**:
    The `IFluentPath` interface has been renamed to `IFhirPath`, and the `FhirContext#newFluentPath()` method
    has been replaced with an equivalent `FhirContext.newFhirPath()`. The FhirPath expression language was initially
    called FluentPath before being renamed, so this change brings HAPI FHIR inline with the correct naming.
    "
- item:
     issue: "1790"
     type: "change"
     title: "**Breaking Change**:
    Several classes in the JPA server have been moved to new packages, including the DaoConfig and IDao interfaces.
    These classes have not changed in terms of functionality, but existing projects may need to adjust some
    package import statements.
    "
- item:
     issue: "1807"
     type: "change"
     title: "**New Feature**:
    A new feature has been added to the JPA server called **[Partitioning](/hapi-fhir/docs/server_jpa/partitioning.html). This
    feature allows data to be segregated using a user defined partitioning strategy. This can be leveraged to take
    advantags of native RDBMS partition strategies, and also to implement **multitenant servers**.
    "
